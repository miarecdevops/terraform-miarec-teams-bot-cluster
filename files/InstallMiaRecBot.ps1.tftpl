# -------------------------------------
# Set System Environment variables
# -------------------------------------

# Below variables are necessary for Traefik to issue SSL certificates using DNS-Challenge
[System.Environment]::SetEnvironmentVariable('AZURE_TENANT_ID', '${azure_tenant_id}', [System.EnvironmentVariableTarget]::Machine)
[System.Environment]::SetEnvironmentVariable('AZURE_RESOURCE_GROUP', '${azure_resource_group}', [System.EnvironmentVariableTarget]::Machine)

# Traefik settings
[System.Environment]::SetEnvironmentVariable('BOT_FQDN', '${bot_fqdn}', [System.EnvironmentVariableTarget]::Machine)
[System.Environment]::SetEnvironmentVariable('BOT_SHARED_FQDN', '${bot_shared_fqdn}', [System.EnvironmentVariableTarget]::Machine)
# [System.Environment]::SetEnvironmentVariable('TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT', 'true', [System.EnvironmentVariableTarget]::Machine)
# [System.Environment]::SetEnvironmentVariable('TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_EMAIL', '${letsencrypt_email}', [System.EnvironmentVariableTarget]::Machine)
# [System.Environment]::SetEnvironmentVariable('TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_DNSCHALLENGE', 'true', [System.EnvironmentVariableTarget]::Machine)
# [System.Environment]::SetEnvironmentVariable('TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_DNSCHALLENGE_PROVIDER', 'azuredns', [System.EnvironmentVariableTarget]::Machine)

# Bot settings
[System.Environment]::SetEnvironmentVariable('AppSettings__ServiceDnsName', '${bot_fqdn}', [System.EnvironmentVariableTarget]::Machine)
[System.Environment]::SetEnvironmentVariable('AppSettings__MediaDnsName', '${bot_fqdn}', [System.EnvironmentVariableTarget]::Machine)

[System.Environment]::SetEnvironmentVariable('AzureKeyVaultName', '${key_valut_name}', [System.EnvironmentVariableTarget]::Machine)
[System.Environment]::SetEnvironmentVariable('AzureAppConfigEndpoint', '${app_config_endpoint}', [System.EnvironmentVariableTarget]::Machine)

# -------------------------------------
# Configure firewall
# -------------------------------------
New-NetFirewallRule -DisplayName 'HTTP' -Profile 'Public' -Direction Inbound -Action Allow -Protocol TCP -LocalPort 80
New-NetFirewallRule -DisplayName 'HTTPS' -Profile 'Public' -Direction Inbound -Action Allow -Protocol TCP -LocalPort 443


# -------------------------------------
# Create the installation directory if doesn't exist
# -------------------------------------
New-Item -ItemType Directory -Force -Path "${install_dir}"

# -------------------------------------
# Download Traefik
# -------------------------------------
Invoke-WebRequest -UseBasicParsing -Uri "${traefik_download_url}" -OutFile "${install_dir}/Traefik.zip"

# -------------------------------------
# Extract *.zip files
# -------------------------------------
Expand-Archive -path "${install_dir}/Traefik.zip" -destinationpath "${install_dir}"

# -------------------------------------
# Install Windows Service
# -------------------------------------
& "${install_dir}/Traefik/TraefikService.exe" -i
& "${install_dir}/Traefik/TraefikService.exe" -r

# -------------------------------------
# Download Visual C++ Redistributable
# -------------------------------------
Invoke-WebRequest -UseBasicParsing -Uri "${crt_download_url}" -OutFile "${install_dir}/VC_redist.x64.exe"
& "${install_dir}/VC_redist.x64.exe" /quiet /norestart

# -------------------------------------
# Download MiaRec Bot
# -------------------------------------
Invoke-WebRequest -UseBasicParsing -Uri "${bot_download_url}" -OutFile "${install_dir}/MiaRec.TeamsBot.zip"

# -------------------------------------
# Extract *.zip files
# -------------------------------------
Expand-Archive -path "${install_dir}/MiaRec.TeamsBot.zip" -destinationpath "${install_dir}"


# -------------------------------------
# Install Windows Service and start it
# -------------------------------------
$serviceName = "MiaRec.TeamsBot"
New-Service -Name $serviceName -BinaryPathName "${install_dir}/MiaRec.TeamsBot/MiaRec.TeamsBot.exe" -StartupType Automatic

# Enable automatic restart on failure
& "sc.exe" failure $serviceName actions= restart/180000/restart/180000/reboot/180000 reset= 86400

# Increases start timeout to 5 minutes
# When VM is just created, it may be too busy doing other tasks (Windows Update, etc.)
# Our .NET application takes longer to start than normally
# Unfortunately, Windows doesn't attempt to start the service again if it failed during start.
Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control" -Name ServicesPipeTimeout -Value 60000 -Type DWord


# The following function will make a few attempts to start the service
function Start-ServiceWithRetry {
    param(
        [string]$serviceName,
        [int]$maxAttempts,
        [int]$delayBetweenAttempts,
        [int]$statusCheckTimeout
    )

    $attempt = 0
    
    while ($attempt -lt $maxAttempts) {
        $attempt++
        Write-Host "Attempt $attempt : Starting service '$serviceName'..."
        
        try {
            # Start the service
            Start-Service -Name $serviceName -ErrorAction Stop
            
            # Check service status with timeout
            $service = Get-Service -Name $serviceName
            $timeElapsed = 0
            while ($service.Status -ne 'Running' -and $timeElapsed -lt $statusCheckTimeout) {
                Write-Host "Service '$serviceName' status: $($service.Status). Waiting for it to start..."
                Start-Sleep -Seconds 2
                $service.Refresh()
                $timeElapsed += 2
            }

            if ($service.Status -eq 'Running') {
                Write-Host "Service '$serviceName' started successfully."
                return
            } else {
                Write-Host "Service '$serviceName' failed to start within the timeout period."
                throw "Service startup timed out."
            }
        } catch {
            Write-Host "Attempt $attempt : Failed to start service '$serviceName'. Error: $_"
        }
        
        if ($attempt -lt $maxAttempts) {
            Write-Host "Retrying in $delayBetweenAttempts seconds..."
            Start-Sleep -Seconds $delayBetweenAttempts
        } else {
            Write-Host "Max attempts reached. Service '$serviceName' could not be started."
        }
    }
}

Start-ServiceWithRetry -serviceName $serviceName -maxAttempts 10 -delayBetweenAttempts 5 -statusCheckTimeout 70




